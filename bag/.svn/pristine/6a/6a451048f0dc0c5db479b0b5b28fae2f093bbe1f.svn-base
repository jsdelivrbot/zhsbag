package com.zhs.core.util;

import com.zhs.core.model.Constant.GpsModel;

import java.net.URL;

public class GpsUtil {
	public static final String BAIDU_LBS_TYPE = "bd09ll";

	public static double pi = 3.1415926535897932384626;
	public static double a = 6378245.0;
	public static double ee = 0.00669342162296594323;

    /**
     * 根据 GPS 坐标获取城市
     * @param lat
     * @param log
     * @return
     */
	public static String getCityByGps(double lat,double log){
		String urlString = "http://gc.ditu.aliyun.com/regeocoding?l="+lat+","+log+"&type=010";
		String res = "";
		try {
			URL url = new URL(urlString);
			java.net.HttpURLConnection conn = (java.net.HttpURLConnection)url.openConnection();
			conn.setDoOutput(true);
			conn.setRequestMethod("POST");
			java.io.BufferedReader in = new java.io.BufferedReader(new java.io.InputStreamReader(conn.getInputStream(),"UTF-8"));
			String line;
			while ((line = in.readLine()) != null) {
				res += line+"\n";
			}
			in.close();
		} catch (Exception e) {
			// System.out.println("error in wapaction,and e is " + e.getMessage());      
		}
		return res;
	}

	/**
	 * 大地坐标84 to 火星坐标系 (GCJ-02)
	 * 
	 * @param lat 纬度
	 * @param lon 经度
	 * @return
	 */
	public static GpsModel gps84_To_Gcj02(double lat, double lon) {
		if (outOfChina(lat, lon)) {
			return null;
		}
		double dLat = transformLat(lon - 105.0, lat - 35.0);
		double dLon = transformLon(lon - 105.0, lat - 35.0);
		double radLat = lat / 180.0 * pi;
		double magic = Math.sin(radLat);
		magic = 1 - ee * magic * magic;
		double sqrtMagic = Math.sqrt(magic);
		dLat = (dLat * 180.0) / ((a * (1 - ee)) / (magic * sqrtMagic) * pi);
		dLon = (dLon * 180.0) / (a / sqrtMagic * Math.cos(radLat) * pi);
		double mgLat = lat + dLat;
		double mgLon = lon + dLon;
		return new GpsModel(mgLat, mgLon);
	}

	/**
	 *  
	 * 火星坐标系 (GCJ-02) to 大地坐标84 * 
	 * @param lon 经度
	 * @param lat 纬度
	 * @return
	 * */
	public static GpsModel gcj_To_Gps84(double lat, double lon) {
		GpsModel gps = transform(lat, lon);
		double lontitude = lon * 2 - gps.getWgLon();
		double latitude = lat * 2 - gps.getWgLat();
		return new GpsModel(latitude, lontitude);
	}

	/**
	 * 火星坐标系 (GCJ-02) 与百度坐标系 (BD-09) 的转换算法 将 GCJ-02 坐标转换成 BD-09 坐标
	 * 
	 * @param gg_lat 纬度
	 * @param gg_lon 经度
	 */
	public static GpsModel gcj02_To_Bd09(double gg_lat, double gg_lon) {
		double x = gg_lon, y = gg_lat;
		double z = Math.sqrt(x * x + y * y) + 0.00002 * Math.sin(y * pi);
		double theta = Math.atan2(y, x) + 0.000003 * Math.cos(x * pi);
		double bd_lon = z * Math.cos(theta) + 0.0065;
		double bd_lat = z * Math.sin(theta) + 0.006;
		return new GpsModel(bd_lat, bd_lon);
	}

	/**
	 * 火星坐标系 (GCJ-02) 与百度坐标系 (BD-09) 的转换算法  
	 * 将 BD-09 坐标转换成GCJ-02 坐标 
	 * @param bd_lat 纬度
	 * @param bd_lon 经度
	 * @return
	 */
	public static GpsModel bd09_To_Gcj02(double bd_lat, double bd_lon) {
		double x = bd_lon - 0.0065, y = bd_lat - 0.006;
		double z = Math.sqrt(x * x + y * y) - 0.00002 * Math.sin(y * pi);
		double theta = Math.atan2(y, x) - 0.000003 * Math.cos(x * pi);
		double gg_lon = z * Math.cos(theta);
		double gg_lat = z * Math.sin(theta);
		return new GpsModel(gg_lat, gg_lon);
	}

	/**
	 * 百度坐标(BD-09)-->大地坐标84
	 * 
	 * @param bd_lat 纬度
	 * @param bd_lon 经度
	 * @return
	 */
	public static GpsModel bd09_To_Gps84(double bd_lat, double bd_lon) {

		GpsModel gcj02 = GpsUtil.bd09_To_Gcj02(bd_lat, bd_lon);
		GpsModel map84 = GpsUtil.gcj_To_Gps84(gcj02.getWgLat(),
				gcj02.getWgLon());
		return map84;

	}

	public static boolean outOfChina(double lat, double lon) {
		if (lon < 72.004 || lon > 137.8347)
			return true;
		if (lat < 0.8293 || lat > 55.8271)
			return true;
		return false;
	}

	public static GpsModel transform(double lat, double lon) {
		if (outOfChina(lat, lon)) {
			return new GpsModel(lat, lon);
		}
		double dLat = transformLat(lon - 105.0, lat - 35.0);
		double dLon = transformLon(lon - 105.0, lat - 35.0);
		double radLat = lat / 180.0 * pi;
		double magic = Math.sin(radLat);
		magic = 1 - ee * magic * magic;
		double sqrtMagic = Math.sqrt(magic);
		dLat = (dLat * 180.0) / ((a * (1 - ee)) / (magic * sqrtMagic) * pi);
		dLon = (dLon * 180.0) / (a / sqrtMagic * Math.cos(radLat) * pi);
		double mgLat = lat + dLat;
		double mgLon = lon + dLon;
		return new GpsModel(mgLat, mgLon);
	}

	public static double transformLat(double x, double y) {
		double ret = -100.0 + 2.0 * x + 3.0 * y + 0.2 * y * y + 0.1 * x * y
				+ 0.2 * Math.sqrt(Math.abs(x));
		ret += (20.0 * Math.sin(6.0 * x * pi) + 20.0 * Math.sin(2.0 * x * pi)) * 2.0 / 3.0;
		ret += (20.0 * Math.sin(y * pi) + 40.0 * Math.sin(y / 3.0 * pi)) * 2.0 / 3.0;
		ret += (160.0 * Math.sin(y / 12.0 * pi) + 320 * Math.sin(y * pi / 30.0)) * 2.0 / 3.0;
		return ret;
	}

	public static double transformLon(double x, double y) {
		double ret = 300.0 + x + 2.0 * y + 0.1 * x * x + 0.1 * x * y + 0.1
				* Math.sqrt(Math.abs(x));
		ret += (20.0 * Math.sin(6.0 * x * pi) + 20.0 * Math.sin(2.0 * x * pi)) * 2.0 / 3.0;
		ret += (20.0 * Math.sin(x * pi) + 40.0 * Math.sin(x / 3.0 * pi)) * 2.0 / 3.0;
		ret += (150.0 * Math.sin(x / 12.0 * pi) + 300.0 * Math.sin(x / 30.0
				* pi)) * 2.0 / 3.0;
		return ret;
	}

	public static void main(String[] args) {

		// 北斗芯片获取的经纬度为WGS84地理坐标 31.426896,119.496145
//		GpsModel gps = new GpsModel(31.426896, 119.496145);
//		System.out.println("gps :" + gps);
//		GpsModel gcj = gps84_To_Gcj02(gps.getWgLat(), gps.getWgLon());
//		System.out.println("gcj :" + gcj);
//		GpsModel star = gcj_To_Gps84(gcj.getWgLat(), gcj.getWgLon());
//		System.out.println("star:" + star);
//		GpsModel bd = gcj02_To_Bd09(gcj.getWgLat(), gcj.getWgLon());
//		System.out.println("bd  :" + bd);
//		GpsModel gcj2 = bd09_To_Gcj02(bd.getWgLat(), bd.getWgLon());
//		System.out.println("gcj :" + gcj2);

        System.out.println(getCityByGps(30.54899,104.0455));
		
		
//		GpsModel gps2 = new GpsModel("31.426896,119.496145"); //火星坐标
//		gps2 = GpsUtil.gcj_To_Gps84(gps2.getWgLat(), gps2.getWgLon());
//		System.out.println(gps2.toString());
		
	}
}
