package com.zhs.core.util;

import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

public class ClassUtil {

	/***
	 * 拷贝属性，将object中的字段拷贝到VO对象中 只针对常规情况，即vo中的字段名与实体中的字段名一致时联动表请自行设值
	 * 
	 * @param objectA
	 * @param objectB
	 * @throws IllegalAccessException
	 * @throws InstantiationException
	 */
	@SuppressWarnings("rawtypes")
	public static Object copyEntityToVo(Object object, Class voObject) {

		if (object == null) {
			return null;
		}
		Object voObjectTo = null;
		try {
			voObjectTo = voObject.newInstance();
		} catch (InstantiationException e1) {
			e1.printStackTrace();
		} catch (IllegalAccessException e1) {
			e1.printStackTrace();
		}

		Class<?> classType = voObjectTo.getClass();
		
		Field fields[] = classType.getDeclaredFields();
		for (int i = 0; i < fields.length; i++) {
			try {
				Field field = fields[i];
				String fieldName = field.getName();
				String firstLetter = fieldName.substring(0, 1).toUpperCase();

				String getMethodName = (field.getType().getName()
						.equals("boolean") ? "is" : "get")
						+ firstLetter + fieldName.substring(1);
				if (getMethodName.equals("getSerialVersionUID")) {
					continue;
				}
				String setMethodName = "set" + firstLetter
						+ fieldName.substring(1);
				Method getMethod = object.getClass().getMethod(getMethodName,
						new Class[] {});
				Method setMethod = classType.getMethod(setMethodName,
						new Class[] { field.getType() });
				Object value = getMethod.invoke(object, new Object[] {});
//				System.out.println(fieldName + "--" + value);
				if (value != null) {
					setMethod.invoke(voObjectTo, new Object[] { value });
				}
			} catch (IllegalAccessException e) {
			} catch (IllegalArgumentException e) {
			} catch (InvocationTargetException e) {
			} catch (NoSuchMethodException e) {
			} catch (SecurityException e) {
			}
		}

		return voObjectTo;
	}

	// 这个方法预留更新上面的方法，copy方法无法copy baseModel中的数据
//	public static Object copy(Object newObject, Object objectCopy) {
//		try {
//			Class<?> classType = newObject.getClass();
//			// objectCopy = classType.getConstructor(new Class[] {})
//			// .newInstance(new Object[] {});
//			Field fields[] = classType.getDeclaredFields();
//			for (int i = 0; i < fields.length; i++) {
//				Field field = fields[i];
//				String fieldName = field.getName();
//				String firstLetter = fieldName.substring(0, 1).toUpperCase();
//
//				String getMethodName = (field.getType().getName()
//						.equals("boolean") ? "is" : "get")
//						+ firstLetter + fieldName.substring(1);
//				if (getMethodName.equals("getSerialVersionUID")) {
//					continue;
//				}
//				String setMethodName = "set" + firstLetter
//						+ fieldName.substring(1);
//				Method getMethod = classType.getMethod(getMethodName,
//						new Class[] {});
//				Method setMethod = classType.getMethod(setMethodName,
//						new Class[] { field.getType() });
//				Object value = getMethod.invoke(newObject, new Object[] {});
//				System.out.println(fieldName + "--" + value);
//				if (value != null) {
//					setMethod.invoke(objectCopy, new Object[] { value });
//				}
//			}
//			// Class fatherClass = BaseModel.class;
//			// if (fatherClass.isAssignableFrom(newObject.getClass())) {
//			// Field fatherFields[] = fatherClass.getDeclaredFields();
//			// for (int i = 0; i < fatherFields.length; i++) {
//			// Field field = fatherFields[i];
//			// String fieldName = field.getName();
//			// String firstLetter = fieldName.substring(0, 1)
//			// .toUpperCase();
//			// String getMethodName = "get" + firstLetter
//			// + fieldName.substring(1);
//			// if (getMethodName.equals("getSerialVersionUID")) {
//			// continue;
//			// }
//			// String setMethodName = "set" + firstLetter
//			// + fieldName.substring(1);
//			// Method getMethod = classType.getMethod(getMethodName,
//			// new Class[] {});
//			// Method setMethod = classType.getMethod(setMethodName,
//			// new Class[] { field.getType() });
//			// Object value = getMethod.invoke(newObject, new Object[] {});
//			// System.out.println(fieldName + "--" + value);
//			// if (value != null) {
//			// setMethod.invoke(objectCopy, new Object[] { value });
//			// }
//			// }
//			// }
//
//		} catch (IllegalAccessException e) {
//			e.printStackTrace();
//		} catch (IllegalArgumentException e) {
//			e.printStackTrace();
//		} catch (InvocationTargetException e) {
//			e.printStackTrace();
//		} catch (NoSuchMethodException e) {
//			e.printStackTrace();
//		} catch (SecurityException e) {
//			e.printStackTrace();
//		}
//		return objectCopy;
//	}

	/***
	 * 拷贝属性，从A,拷贝到B里
	 * 
	 * @param objectA
	 * @param objectB
	 */
	public static void copyProperties(Object objectA, Object objectB) {

		if (objectA == null || objectA == null) {
			return;
		}

		Field[] fields = objectA.getClass().getDeclaredFields();

		Method methodA = null;
		Method methodB = null;

		String methodAName = null;
		String methodBName = null;
		// int i = 0;
		for (Field field : fields) {
			// System.out.println(">>>>>>>>>>>>>>:" + i++);
			String name = field.getName();
			int length = name.length();

			methodAName = new StringBuffer("get")
					.append(name.substring(0, 1).toUpperCase())
					.append(name.substring(1, length)).toString();

			methodBName = new StringBuffer("set")
					.append(name.substring(0, 1).toUpperCase())
					.append(name.substring(1, length)).toString();

			try {
				methodA = objectA.getClass().getDeclaredMethod(methodAName);

				Object methodBParam = methodA.invoke(objectA);
				/*
				 * System.out.println(">>>>>>>>>>>>>>:methodAName:" +
				 * methodAName);
				 * System.out.println(">>>>>>>>>>>>>>:methodBName:" +
				 * methodBName);
				 * System.out.println(">>>>>>>>>>>>>>:methodBParam:" +
				 * methodBParam);
				 */

				if (methodBParam != null) {

					methodB = objectB.getClass().getDeclaredMethod(methodBName,
							methodBParam.getClass());

					methodB.invoke(objectB, methodBParam);
				}

			} catch (SecurityException e) {
				// e.printStackTrace();
			} catch (NoSuchMethodException e) {
				// e.printStackTrace();
			} catch (IllegalArgumentException e) {
				// e.printStackTrace();
			} catch (IllegalAccessException e) {
				// e.printStackTrace();
			} catch (InvocationTargetException e) {
				// e.printStackTrace();
			}
		}
	}

	/***
	 * 拷贝属性，从params,拷贝到object
	 * 
	 * @param
	 * @param
	 */
	public static void copyProperties(Map<String, Object> params, Object object) {
		if (object == null || params == null) {
			return;
		}

		Field[] fields = object.getClass().getDeclaredFields();

		String methodName = null;

		for (Field field : fields) {
			String name = field.getName();
			int length = name.length();
			Object value = params.get(name);
			// System.out.println("name:" + name + ";value:" + value);
			if (value == null) {
				continue;
			}
			// System.out.println(">>>>>>>>>>:" + );

			// String type = field.getType().getName();

			methodName = new StringBuffer("set")
					.append(name.substring(0, 1).toUpperCase())
					.append(name.substring(1, length)).toString();
			System.out.println("methodName:" + methodName);

			try {
				// Object b = Class.forName(type).newInstance();

				Method methodA = object.getClass().getDeclaredMethod(
						methodName, value.getClass());

				methodA.invoke(object, value);
			} catch (SecurityException e) {
				e.printStackTrace();
			} catch (NoSuchMethodException e) {
				e.printStackTrace();
			} catch (IllegalArgumentException e) {
				e.printStackTrace();
			} catch (IllegalAccessException e) {
				e.printStackTrace();
			} catch (InvocationTargetException e) {
				e.printStackTrace();
			}
		}
	}

	/***
	 * 
	 * 在object a对象中，找实现了T接口的对象的类型，返回值类型的集合
	 * 
	 * @param objectA
	 *            判断对象
	 * @param T
	 *            实现接口
	 */
	@SuppressWarnings({ "rawtypes", "unchecked" })
	public static List<Class> findTypeProperties(Object objectA, Class T) {

		List l = new ArrayList();
		if (objectA == null || T == null) {
			return l;
		}

		Field[] fields = objectA.getClass().getDeclaredFields();
		for (Field field : fields) {
			Class type = field.getType();
			Class[] interfaceType = type.getInterfaces();
			if (interfaceType != null) {
				for (Class c : interfaceType) {
					// System.out.println(c);
					if (c.equals(T)) {
						l.add(type);
					}
				}
			}
		}
		return l;
	}

	public static Object getclass(String className) {
		Object obj = null;
		try {
			obj = Class.forName(className).newInstance();
		} catch (InstantiationException e) {
			e.printStackTrace();
		} catch (IllegalAccessException e) {
			e.printStackTrace();
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		} // 以String类型的className实例化类
		return obj;
	}

	public static Object copy(Object object) {
		Object objectCopy = null;
		try {
			Class<?> classType = object.getClass();
			objectCopy = classType.getConstructor(new Class[] {}).newInstance(
					new Object[] {});
			Field fields[] = classType.getDeclaredFields();
			for (int i = 0; i < fields.length; i++) {
				Field field = fields[i];
				String fieldName = field.getName();
				String firstLetter = fieldName.substring(0, 1).toUpperCase();
				String getMethodName = "get" + firstLetter
						+ fieldName.substring(1);
				if (getMethodName.equals("getSerialVersionUID")) {
					continue;
				}
				String setMethodName = "set" + firstLetter
						+ fieldName.substring(1);
				Method getMethod = classType.getMethod(getMethodName,
						new Class[] {});
				Method setMethod = classType.getMethod(setMethodName,
						new Class[] { field.getType() });
				Object value = getMethod.invoke(object, new Object[] {});
				setMethod.invoke(objectCopy, new Object[] { value });
			}
		} catch (InstantiationException e) {
			e.printStackTrace();
		} catch (IllegalAccessException e) {
			e.printStackTrace();
		} catch (IllegalArgumentException e) {
			e.printStackTrace();
		} catch (InvocationTargetException e) {
			e.printStackTrace();
		} catch (NoSuchMethodException e) {
			e.printStackTrace();
		} catch (SecurityException e) {
			e.printStackTrace();
		}
		return objectCopy;
	}

}
