package com.zhs.core.util.zip;

import java.io.File;
import java.io.FileInputStream;
import java.util.List;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;

/**
 * zip压缩包VO对象
 * @author psc
 *
 */
public class ZipVO {
	/**压缩文件下的第一级文件夹名称*/
	private String directoryName;
	/**要下载的文件*/
	private List<File> downloadFiles;
	/**变量:downloadFiles 对应的文件在压缩包保存的名称*/
	private List<String> saveFileNames;
	
	/**
	 * @param directoryName  压缩文件下的第一级文件夹名称
	 * @param downloadFiles  要下载的文件(只能是文件)
	 * @param saveFileNames  变量:downloadFiles 对应的文件在压缩包保存的名称
	 */
	public ZipVO(String directoryName,List<File> downloadFiles,List<String> saveFileNames){
		this.directoryName = directoryName;
		this.downloadFiles = downloadFiles;
		this.saveFileNames = saveFileNames;
	}
	
	/**
     * 向压缩文件里面添加文件
     * @param out zip输出流对象
     */
    public void start(ZipOutputStream out){
    	//是否已经指定名称
    	boolean createName = false;
    	if(saveFileNames != null && saveFileNames.size() == downloadFiles.size()){
    		createName = true;
    	}
    	if(directoryName==null || "".equals(directoryName)){
    		directoryName = "";
    	}else{
    		directoryName = directoryName.replaceAll("\\*", "/");
	        if(!directoryName.endsWith("/")){  
	        	directoryName+="/";  
	        }  
    	}
        byte[] buf = new byte[1024*512];  
        try {
            for(int i=0;i<downloadFiles.size();i++){
            	File thisFile = downloadFiles.get(i);
            	if(!thisFile.exists() || thisFile.isDirectory()){
            		System.out.println("文件\""+thisFile.getPath()+"\"不存在或是目录!!");
            		continue;
            	}
                FileInputStream in = new FileInputStream(thisFile);
                if(createName){
                	String ext = thisFile.getName();
                	ext = ext.substring(ext.lastIndexOf("."));
                	out.putNextEntry(new ZipEntry(directoryName+saveFileNames.get(i)+ext));
                }else{
                	out.putNextEntry(new ZipEntry(directoryName+thisFile.getName()));
                }
                int len;  
                while((len=in.read(buf))>0){
                    out.write(buf,0,len);  
                }
                out.closeEntry();
                in.close();  
            }  
        } catch (Exception e) {  
            e.printStackTrace();  
        }  
    }
}
